-- Vault: Enhanced 2D UI "Sus" Animation with Sound & Link
-- Creates a 2D animation, plays sound, and attempts to copy a link.
-- Butt elements are rotated 90 degrees (stacked vertically).
-- Clipboard functionality requires special permissions (e.g., exploit environment).

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local SoundService = game:GetService("SoundService")

local localPlayer = Players.LocalPlayer
if not localPlayer then
    warn("Vault: LocalPlayer not found. Script may not run correctly.")
    return
end

local playerGui = localPlayer:WaitForChild("PlayerGui")
if not playerGui then
    warn("Vault: PlayerGui not found.")
    return
end

--[[ CONFIGURATION ]]
local CONFIG = {
    STICK = {
        SHAFT_SIZE = UDim2.new(0, 100, 0, 20), -- Width, Height
        TIP_SIZE_ADD = UDim2.new(0, 5, 0, 5),
        SHAFT_COLOR = Color3.fromRGB(220, 180, 160),
        TIP_COLOR = Color3.fromRGB(210, 160, 150),
        START_POS_OFFSET_X = UDim.new(0, -130) -- Initial X offset from center for the stick's base
    },
    BUTT = {
        CHEEK_SIZE = UDim2.new(0, 50, 0, 50), -- Width, Height for circular cheeks (UICorner makes them round)
        CHEEK_COLOR = Color3.fromRGB(230, 190, 170),
        CHEEK_OFFSET_Y = UDim.new(0, 25),    -- Vertical offset for each cheek from butt assembly's center (for 90deg rotation)
        ASSEMBLY_POS_OFFSET_X = UDim.new(0, 80)
    },
    ANIMATION = {
        THRUST_DURATION_FORWARD = 0.3,
        THRUST_DURATION_BACKWARD = 0.4,
        PAUSE_BETWEEN_THRUSTS = 0.1,
        THRUST_DISTANCE = 80,
        MAX_CHEEK_SPREAD = 15,          -- Pixels each cheek moves outwards (now vertically)
        VERTICAL_OFFSET = UDim.new(0, 0)
    },
    SOUND = {
        ID = "rbxassetid://6321406390", -- "Wet Splat" sound effect. If this fails, the asset might be unavailable.
        VOLUME = 0.8,
        LOOPED = false,
        PLAYBACK_SPEED = 1.0
    },
    LINK_TO_COPY = "https://www.pornhub.com", -- c changed to p
    UI_ZINDEX = 10,
    CONTAINER_SIZE = UDim2.new(0, 400, 0, 150), -- Adjusted for potentially taller butt assembly
    CONTAINER_POSITION = UDim2.new(0.5, 0, 0.8, 0)
}

--[[ STATE VARIABLES ]]
local screenGui = nil
local mainContainer = nil
local stickAssembly, buttAssembly
local topCheek, bottomCheek, stickShaft, stickTip -- Renamed for clarity
local animationSound = nil
local isAnimating = false

--[[ UI ELEMENT CREATION ]]
local function createUIElement(className, name, parent, properties)
    local element = Instance.new(className)
    element.Name = name
    for prop, value in pairs(properties or {}) do
        element[prop] = value
    end
    element.Parent = parent
    return element
end

local function setupUI()
    screenGui = createUIElement("ScreenGui", "VaultSusAnimationGui", playerGui, {
        ResetOnSpawn = false -- Keep UI if character respawns
    })
    
    mainContainer = createUIElement("Frame", "MainContainer", screenGui, {
        Size = CONFIG.CONTAINER_SIZE,
        Position = CONFIG.CONTAINER_POSITION,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        ZIndex = CONFIG.UI_ZINDEX
    })

    -- Butt Assembly (rotated 90 degrees - cheeks stacked vertically)
    buttAssembly = createUIElement("Frame", "ButtAssembly", mainContainer, {
        Size = UDim2.new(0, CONFIG.BUTT.CHEEK_SIZE.X.Offset, 0, CONFIG.BUTT.CHEEK_SIZE.Y.Offset * 2 + CONFIG.BUTT.CHEEK_OFFSET_Y.Offset),
        Position = UDim2.new(0.5, CONFIG.BUTT.ASSEMBLY_POS_OFFSET_X.Offset, 0.5, CONFIG.ANIMATION.VERTICAL_OFFSET.Offset),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1
    })

    topCheek = createUIElement("Frame", "TopCheek", buttAssembly, {
        Size = CONFIG.BUTT.CHEEK_SIZE,
        Position = UDim2.new(0.5, 0, 0.5, -CONFIG.BUTT.CHEEK_OFFSET_Y.Offset), -- Positioned above center
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = CONFIG.BUTT.CHEEK_COLOR,
        ZIndex = CONFIG.UI_ZINDEX + 1
    })
    createUIElement("UICorner", "Corner", topCheek, {CornerRadius = UDim.new(0.5, 0)})

    bottomCheek = createUIElement("Frame", "BottomCheek", buttAssembly, {
        Size = CONFIG.BUTT.CHEEK_SIZE,
        Position = UDim2.new(0.5, 0, 0.5, CONFIG.BUTT.CHEEK_OFFSET_Y.Offset), -- Positioned below center
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = CONFIG.BUTT.CHEEK_COLOR,
        ZIndex = CONFIG.UI_ZINDEX + 1
    })
    createUIElement("UICorner", "Corner", bottomCheek, {CornerRadius = UDim.new(0.5, 0)})

    -- Stick Assembly
    local stickTotalWidth = CONFIG.STICK.SHAFT_SIZE.X.Offset + (CONFIG.STICK.TIP_SIZE_ADD.X.Offset / 2)
    stickAssembly = createUIElement("Frame", "StickAssembly", mainContainer, {
        Size = UDim2.new(0, stickTotalWidth, 0, CONFIG.STICK.SHAFT_SIZE.Y.Offset + CONFIG.STICK.TIP_SIZE_ADD.Y.Offset),
        Position = UDim2.new(0.5, CONFIG.STICK.START_POS_OFFSET_X.Offset, 0.5, CONFIG.ANIMATION.VERTICAL_OFFSET.Offset),
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundTransparency = 1,
        ZIndex = CONFIG.UI_ZINDEX + 2
    })
    
    stickShaft = createUIElement("Frame", "StickShaft", stickAssembly, {
        Size = CONFIG.STICK.SHAFT_SIZE,
        Position = UDim2.new(0, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundColor3 = CONFIG.STICK.SHAFT_COLOR
    })
    createUIElement("UICorner", "CornerS", stickShaft, {CornerRadius = UDim.new(0, 5)})

    stickTip = createUIElement("Frame", "StickTip", stickAssembly, {
        Size = CONFIG.STICK.SHAFT_SIZE + CONFIG.STICK.TIP_SIZE_ADD,
        Position = UDim2.new(0, CONFIG.STICK.SHAFT_SIZE.X.Offset - ( (CONFIG.STICK.SHAFT_SIZE.X.Offset + CONFIG.STICK.TIP_SIZE_ADD.X.Offset)/4), 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = CONFIG.STICK.TIP_COLOR
    })
    createUIElement("UICorner", "CornerT", stickTip, {CornerRadius = UDim.new(0.5, 0)})

    -- Sound (Parent to SoundService for reliability or mainContainer)
    animationSound = createUIElement("Sound", "AnimationSound", SoundService, { -- Changed parent to SoundService
        SoundId = CONFIG.SOUND.ID,
        Volume = CONFIG.SOUND.VOLUME,
        Looped = CONFIG.SOUND.LOOPED,
        PlaybackSpeed = CONFIG.SOUND.PLAYBACK_SPEED
    })

    -- Attempt to copy link to clipboard
    local link = CONFIG.LINK_TO_COPY
    local success, err = pcall(function()
        setclipboard(link) -- This function is restricted and typically requires exploit capabilities
    end)
    if success then
        print("Vault: Link ('" .. link .. "') copied to clipboard (if permissions allow).")
    else
        print("Vault: Failed to copy link to clipboard. This usually requires exploit privileges. Error: " .. tostring(err))
    end
end

--[[ ANIMATION LOGIC ]]
local function animate()
    isAnimating = true
    local animConfig = CONFIG.ANIMATION
    local stickStartX = stickAssembly.Position.X.Offset
    local stickEndX = stickStartX + animConfig.THRUST_DISTANCE

    local cheekTopStartY = topCheek.Position.Y.Offset
    local cheekBottomStartY = bottomCheek.Position.Y.Offset

    local forwardTweenInfo = TweenInfo.new(animConfig.THRUST_DURATION_FORWARD, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local backwardTweenInfo = TweenInfo.new(animConfig.THRUST_DURATION_BACKWARD, Enum.EasingStyle.Sine, Enum.EasingDirection.In)
    
    local cheekSpreadTweenInfo = TweenInfo.new(animConfig.THRUST_DURATION_FORWARD * 0.7, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out)
    local cheekContractTweenInfo = TweenInfo.new(animConfig.THRUST_DURATION_BACKWARD * 0.7, Enum.EasingStyle.Elastic, Enum.EasingDirection.In)

    coroutine.wrap(function()
        while isAnimating and stickAssembly and stickAssembly.Parent do -- Ensure elements exist
            -- Thrust Forward
            local stickForward = TweenService:Create(stickAssembly, forwardTweenInfo, {Position = UDim2.new(0.5, stickEndX, 0.5, animConfig.VERTICAL_OFFSET.Offset)})
            -- Cheeks spread vertically
            local cheekSpreadTop = TweenService:Create(topCheek, cheekSpreadTweenInfo, {Position = UDim2.new(0.5, 0, 0.5, cheekTopStartY - animConfig.MAX_CHEEK_SPREAD)})
            local cheekSpreadBottom = TweenService:Create(bottomCheek, cheekSpreadTweenInfo, {Position = UDim2.new(0.5, 0, 0.5, cheekBottomStartY + animConfig.MAX_CHEEK_SPREAD)})
            
            if not CONFIG.SOUND.LOOPED and animationSound and animationSound.Parent then
                -- print("Vault: Playing sound...") -- For debugging
                animationSound:Play()
            end
            
            stickForward:Play()
            cheekSpreadTop:Play()
            cheekSpreadBottom:Play()
            
            stickForward.Completed:Wait()

            -- Thrust Backward
            local stickBackward = TweenService:Create(stickAssembly, backwardTweenInfo, {Position = UDim2.new(0.5, stickStartX, 0.5, animConfig.VERTICAL_OFFSET.Offset)})
            local cheekContractTop = TweenService:Create(topCheek, cheekContractTweenInfo, {Position = UDim2.new(0.5, 0, 0.5, cheekTopStartY)})
            local cheekContractBottom = TweenService:Create(bottomCheek, cheekContractTweenInfo, {Position = UDim2.new(0.5, 0, 0.5, cheekBottomStartY)})

            stickBackward:Play()
            cheekContractTop:Play()
            cheekContractBottom:Play()

            stickBackward.Completed:Wait()

            if animConfig.PAUSE_BETWEEN_THRUSTS > 0 then
                task.wait(animConfig.PAUSE_BETWEEN_THRUSTS)
            end
            if not isAnimating then break end
        end
    end)()
end

--[[ CLEANUP FUNCTION ]]
function cleanupVaultSusUI()
    isAnimating = false
    if animationSound then
        animationSound:Stop()
        animationSound:Destroy()
        animationSound = nil
    end
    if screenGui and screenGui.Parent then
        screenGui:Destroy()
        screenGui = nil
    end
    if _G.VaultSusUICleanup == cleanupVaultSusUI then
        _G.VaultSusUICleanup = nil
    end
    print("Vault: Enhanced 2D Sus UI Animation cleaned up.")
end

--[[ INITIALIZATION ]]
-- Cleanup any existing UI from a previous run if names conflict
local oldGui = playerGui:FindFirstChild("VaultSusAnimationGui")
if oldGui then
    oldGui:Destroy()
end
if SoundService:FindFirstChild("AnimationSound") then -- If sound was parented to SoundService
    SoundService.AnimationSound:Destroy()
end


setupUI()
animate()

if CONFIG.SOUND.LOOPED and animationSound and animationSound.Parent then
    animationSound:Play()
end

_G.VaultSusUICleanup = cleanupVaultSusUI

print("Vault: Enhanced 2D Sus UI Animation initialized. Butt elements rotated 90 degrees.")
print("Vault: Link copy attempted. Check console for status.")
print("Vault: To stop and remove, execute _G.VaultSusUICleanup() in your script environment.")
